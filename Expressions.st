TestCase subclass: #EAdditionTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Expressions'!!EAdditionTest methodsFor: 'tests' stamp: 'Barry 3/8/2019 17:15'!testNegated| ep1 ep2 |ep1 := EConstant new value: 5.ep2 := EConstant new value: 3.self assert: (EAddition new right: ep1; left: ep2) negatedevaluate equals: -8! !!EAdditionTest methodsFor: 'tests' stamp: 'BarryIssagha 3/9/2019 14:05'!testEvaluateWithClassCreationMessage| ep1 ep2 |ep1 := EConstant value:5.ep2 := EConstant value:3.self assert: (EAddition left: ep1 right: ep2) evaluate equals: 8! !!EAdditionTest methodsFor: 'tests' stamp: 'Barry 3/8/2019 16:41'!testEvaluate| ep1 ep2 |ep1 := (EConstant new value: 5).ep2 := (EConstant new value: 3).self assert: (EAddition new right: ep1; left: ep2) evaluateequals: 8! !!EAdditionTest methodsFor: 'tests' stamp: 'Barry 3/8/2019 16:49'!testEvaluateWithNegation| ep1 ep2 |ep1 := ENegation new expression: (EConstant new value: 5).ep2 := (EConstant new value: 3).self assert: (EAddition new right: ep1; left: ep2) evaluateequals: -2! !!EAdditionTest methodsFor: 'tests' stamp: 'BarryIssagha 3/9/2019 14:21'!testPrintingself assert: (EAddition fivePlusThree) printString equals: '( 5 + 3 )'.self assert: (EAddition fivePlusThree) negated printString equals:'- ( 5 + 3 )'! !TestCase subclass: #EConstantTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Expressions'!!EConstantTest methodsFor: 'tests' stamp: 'Barry 3/8/2019 16:24'!testEvaluate	"test pour evaluer une valeur"self assert: (EConstant new value: 5) evaluate equals: 5! !!EConstantTest methodsFor: 'tests' stamp: 'BarryIssagha 3/9/2019 14:00'!testCreationWithClassCreationMessageself assert: (EConstant value: 5) evaluate equals: 5! !!EConstantTest methodsFor: 'tests' stamp: 'Barry 3/8/2019 17:08'!testNegatedself assert: (EConstant new value: 6) negated evaluate equals: -6! !!EConstantTest methodsFor: 'tests' stamp: 'BarryIssagha 3/9/2019 14:14'!testPrintingself assert: (EConstant value: 5) printString equals: '5'! !Object subclass: #EExpression	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Expressions'!!EExpression methodsFor: 'arithmetic' stamp: 'BarryIssagha 3/9/2019 13:59'!negated^ ENegation new expression: self! !!EExpression methodsFor: 'public access' stamp: 'BarryIssagha 3/10/2019 01:28'!evaluate	^self subclassResponsibility! !!EExpression methodsFor: 'as yet unclassified' stamp: 'BarryIssagha 3/10/2019 02:10'!evaluateWith: aDictionary	^ self evaluate! !EExpression subclass: #EBinaryExpression	instanceVariableNames: 'left right'	classVariableNames: ''	poolDictionaries: ''	category: 'Expressions'!!EBinaryExpression methodsFor: 'printing' stamp: 'BarryIssagha 3/10/2019 01:02'!printOn: aStream	aStream 	nextPutAll: '( '.	left printOn: aStream.	aStream nextPutAll:  self operatorString.	right printOn: aStream.	aStream nextPutAll: ' )'.! !!EBinaryExpression methodsFor: 'print' stamp: 'BarryIssagha 3/10/2019 01:26'!operatorString	^ self subclassResponsibility! !!EBinaryExpression methodsFor: 'accessing' stamp: 'BarryIssagha 3/10/2019 00:33'!right: anExpressionright := anExpression! !!EBinaryExpression methodsFor: 'accessing' stamp: 'BarryIssagha 3/10/2019 00:33'!left: anExpressionleft := anExpression! !EBinaryExpression subclass: #EAddition	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Expressions'!!EAddition methodsFor: 'as yet unclassified' stamp: 'BarryIssagha 3/10/2019 01:01'!operatorString	^ ' + '! !!EAddition methodsFor: 'public access' stamp: 'Barry 3/8/2019 16:48'!evaluate"evaluation pour une addition"|evalleft evalrigth|evalleft := left evaluate.evalrigth := right evaluate.^evalleft + evalrigth ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!EAddition class	instanceVariableNames: ''!!EAddition class methodsFor: 'initialize-release' stamp: 'BarryIssagha 3/9/2019 14:04'!left: anInteger right: anInteger2^ self new left: anInteger ; right: anInteger2! !!EAddition class methodsFor: 'as yet unclassified' stamp: 'BarryIssagha 3/9/2019 14:11'!fivePlusThree	<sampleInstance>	| ep1 ep2 |ep1 := EConstant new value: 5.ep2 := EConstant new value: 3.^ self new left: ep1 ; right: ep2! !EExpression subclass: #EConstant	instanceVariableNames: 'value'	classVariableNames: ''	poolDictionaries: ''	category: 'Expressions'!!EConstant methodsFor: 'printing' stamp: 'BarryIssagha 3/9/2019 14:15'!printOn: aStreamaStream 	nextPutAll: value printString! !!EConstant methodsFor: 'accessing' stamp: 'Barry 3/8/2019 16:23'!value: anInteger	"  modife la valeur"	value := anInteger ! !!EConstant methodsFor: 'public access' stamp: 'Barry 3/8/2019 16:22'!evaluate	"evalue la valeur d'une constance"	^value! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!EConstant class	instanceVariableNames: ''!!EConstant class methodsFor: 'as yet unclassified' stamp: 'BarryIssagha 3/9/2019 14:11'!constant5<sampleInstance>^ self new value: 5! !!EConstant class methodsFor: 'as yet unclassified' stamp: 'BarryIssagha 3/9/2019 14:10'!constant3<sampleInstance>^ self new value: 3! !!EConstant class methodsFor: 'accessing' stamp: 'BarryIssagha 3/9/2019 14:00'!value: anInteger^ self new value: anInteger! !EBinaryExpression subclass: #EMultiplication	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Expressions'!!EMultiplication methodsFor: 'as yet unclassified' stamp: 'BarryIssagha 3/10/2019 01:02'!operatorString	^ ' * '! !!EMultiplication methodsFor: 'public access' stamp: 'Barry 3/8/2019 16:56'!evaluate	|evalRigth evalLeft|	evalRigth := right evaluate .	evalLeft := left evaluate .	^ evalRigth * evalLeft ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!EMultiplication class	instanceVariableNames: ''!!EMultiplication class methodsFor: 'as yet unclassified' stamp: 'BarryIssagha 3/9/2019 14:22'!fiveTimesThree<sampleInstance>| ep1 ep2 |ep1 := EConstant constant5.ep2 := EConstant constant3.^ EMultiplication new left: ep1 ; right: ep2! !!EMultiplication class methodsFor: 'initialize-release' stamp: 'BarryIssagha 3/9/2019 14:07'!left: anInteger right: anInteger2^ self new left: anInteger ; right: anInteger2! !TestCase subclass: #EMultiplicationTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Expressions'!!EMultiplicationTest methodsFor: 'tests' stamp: 'Barry 3/8/2019 16:51'!testEvaluate| ep1 ep2 |ep1 := (EConstant new value: 5).ep2 := (EConstant new value: 3).self assert: (EMultiplication new right: ep1; left: ep2) evaluateequals: 15! !!EMultiplicationTest methodsFor: 'tests' stamp: 'BarryIssagha 3/9/2019 13:55'!testEvaluateNegated| ep1 ep2 |ep1 := EConstant new value: 5.ep2 := EConstant new value: 3.self assert: (EMultiplication new right: ep1; left: ep2) negated evaluate equals: -15! !!EMultiplicationTest methodsFor: 'tests' stamp: 'BarryIssagha 3/9/2019 14:09'!testEvaluateWithClassCreationMessage| ep1 ep2 |ep1 := EConstant new value: 5.ep2 := EConstant new value: 3.self assert: (EMultiplication new left: ep1; right: ep2) evaluate equals: 15! !!EMultiplicationTest methodsFor: 'tests' stamp: 'BarryIssagha 3/9/2019 14:23'!testPrintingself assert: (EMultiplication fiveTimesThree) negated printString equals: '- ( 5 * 3 )'! !EExpression subclass: #ENegation	instanceVariableNames: 'expression'	classVariableNames: ''	poolDictionaries: ''	category: 'Expressions'!!ENegation methodsFor: 'arithmetic' stamp: 'BarryIssagha 3/10/2019 00:03'!negated |val |	val := self evaluate.	(val < 0)		ifTrue: [ ^ expression ]		ifFalse: [ ^ super negated  ]! !!ENegation methodsFor: 'public access' stamp: 'Barry 3/8/2019 16:37'!evaluate	| valeur|	valeur := expression evaluate.	^ valeur negated 	! !!ENegation methodsFor: 'accessing' stamp: 'BarryIssagha 3/9/2019 14:17'!printOn: aStreamaStream 	nextPutAll: '- ';	nextPutAll: expression printString! !!ENegation methodsFor: 'accessing' stamp: 'Barry 3/8/2019 16:26'!expression: anExpression"definition d'un setteur"expression := anExpression! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ENegation class	instanceVariableNames: ''!!ENegation class methodsFor: 'instance creation' stamp: 'BarryIssagha 3/9/2019 14:02'!expression: anExpression^self new expression: anExpression ! !TestCase subclass: #ENegationTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Expressions'!!ENegationTest methodsFor: 'tests' stamp: 'BarryIssagha 3/10/2019 00:04'!testNegatedStructureIsCorrect	| exp |		exp := EConstant value: 11.		self assert: exp negated class = ENegation.		self assert: exp negated negated equals: exp.! !!ENegationTest methodsFor: 'tests' stamp: 'Barry 3/8/2019 17:11'!testNegationNegatedself assert: (EConstant new value: 6) negated negated evaluateequals: 6! !!ENegationTest methodsFor: 'tests' stamp: 'BarryIssagha 3/9/2019 14:03'!testEvaluateWithClassCreationMessageself assert: (ENegation expression: (EConstant value: 5)) evaluate equals: -5! !!ENegationTest methodsFor: 'tests' stamp: 'Barry 3/8/2019 16:25'!testEvaluateself assert: (ENegation new expression: (EConstant new value: 5))evaluate equals: -5! !EExpression subclass: #EVariable	instanceVariableNames: 'id'	classVariableNames: ''	poolDictionaries: ''	category: 'Expressions'!!EVariable methodsFor: 'as yet unclassified' stamp: 'BarryIssagha 3/10/2019 01:59'!evaluateWith: aBindingDictionary	^ aBindingDictionary at: id! !!EVariable methodsFor: 'accessing' stamp: 'BarryIssagha 3/10/2019 01:55'!id: aSymbol	id := aSymbol! !!EVariable methodsFor: 'printing' stamp: 'BarryIssagha 3/10/2019 01:56'!printOn: aStream	aStream 		nextPutAll: id asString! !TestCase subclass: #EVariableTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Expressions'!!EVariableTest methodsFor: 'tests' stamp: 'BarryIssagha 3/10/2019 02:08'!testEvaluateXplusY	| ep1 ep2 add |	ep1 := EVariable new id: #x.	ep2 := EVariable new id: #y.	add := EAddition left: ep1 right: ep2.	self assert: (add evaluateWith: { #x -> 10 . #y -> 2 } asDictionary) equals: 12.	self assert: (add evaluateWith: { #x -> 10 . #y -> 12 } asDictionary) equals: 22! !!EVariableTest methodsFor: 'tests' stamp: 'BarryIssagha 3/10/2019 01:54'!testValueOfx	self assert: ((EVariable new id: #x) evaluateWith: {#x -> 10}asDictionary) equals: 10.! !!EVariableTest methodsFor: 'tests' stamp: 'BarryIssagha 3/10/2019 02:03'!testValueOfxInNegation	self assert: ((EVariable new id: #x) negated evaluateWith: {#x -> 10} asDictionary) equals: -10! !