Object subclass: #EAddition	instanceVariableNames: 'left right'	classVariableNames: ''	poolDictionaries: ''	category: 'Expressions'!!EAddition methodsFor: 'public access' stamp: 'Barry 3/8/2019 16:48'!evaluate"evaluation pour une addition"|evalleft evalrigth|evalleft := left evaluate.evalrigth := right evaluate.^evalleft + evalrigth ! !!EAddition methodsFor: 'arithmetic' stamp: 'Barry 3/8/2019 17:41'!negated	^ ENegation new expression: self! !!EAddition methodsFor: 'accessing' stamp: 'Barry 3/8/2019 16:46'!right: expression" la partie droite"right := expression ! !!EAddition methodsFor: 'accessing' stamp: 'Barry 3/8/2019 16:45'!left: expression"la partie gauche"left := expression! !TestCase subclass: #EAdditionTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Expressions'!!EAdditionTest methodsFor: 'tests' stamp: 'Barry 3/8/2019 16:41'!testEvaluate| ep1 ep2 |ep1 := (EConstant new value: 5).ep2 := (EConstant new value: 3).self assert: (EAddition new right: ep1; left: ep2) evaluateequals: 8! !!EAdditionTest methodsFor: 'tests' stamp: 'Barry 3/8/2019 16:49'!testEvaluateWithNegation| ep1 ep2 |ep1 := ENegation new expression: (EConstant new value: 5).ep2 := (EConstant new value: 3).self assert: (EAddition new right: ep1; left: ep2) evaluateequals: -2! !!EAdditionTest methodsFor: 'tests' stamp: 'Barry 3/8/2019 17:15'!testNegated| ep1 ep2 |ep1 := EConstant new value: 5.ep2 := EConstant new value: 3.self assert: (EAddition new right: ep1; left: ep2) negatedevaluate equals: -8! !Object subclass: #EConstant	instanceVariableNames: 'value'	classVariableNames: ''	poolDictionaries: ''	category: 'Expressions'!!EConstant methodsFor: 'public access' stamp: 'Barry 3/8/2019 16:22'!evaluate	"evalue la valeur d'une constance"	^value! !!EConstant methodsFor: 'accessing' stamp: 'Barry 3/8/2019 16:23'!value: anInteger	"  modife la valeur"	value := anInteger ! !!EConstant methodsFor: 'arithmetic' stamp: 'Barry 3/8/2019 17:08'!negated^ ENegation new expression: self! !TestCase subclass: #EConstantTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Expressions'!!EConstantTest methodsFor: 'tests' stamp: 'Barry 3/8/2019 16:24'!testEvaluate	"test pour evaluer une valeur"self assert: (EConstant new value: 5) evaluate equals: 5! !!EConstantTest methodsFor: 'tests' stamp: 'Barry 3/8/2019 17:08'!testNegatedself assert: (EConstant new value: 6) negated evaluate equals: -6! !Object subclass: #EMultiplication	instanceVariableNames: 'left right'	classVariableNames: ''	poolDictionaries: ''	category: 'Expressions'!!EMultiplication methodsFor: 'accessing' stamp: 'Barry 3/8/2019 16:52'!right: anExpressionright := anExpression! !!EMultiplication methodsFor: 'accessing' stamp: 'Barry 3/8/2019 16:52'!left: anExpressionleft := anExpression! !!EMultiplication methodsFor: 'public access' stamp: 'Barry 3/8/2019 16:56'!evaluate	|evalRigth evalLeft|	evalRigth := right evaluate .	evalLeft := left evaluate .	^ evalRigth * evalLeft ! !TestCase subclass: #EMultiplicationTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Expressions'!!EMultiplicationTest methodsFor: 'tests' stamp: 'Barry 3/8/2019 16:51'!testEvaluate| ep1 ep2 |ep1 := (EConstant new value: 5).ep2 := (EConstant new value: 3).self assert: (EMultiplication new right: ep1; left: ep2) evaluateequals: 15! !Object subclass: #ENegation	instanceVariableNames: 'expression'	classVariableNames: ''	poolDictionaries: ''	category: 'Expressions'!!ENegation methodsFor: 'public access' stamp: 'Barry 3/8/2019 16:37'!evaluate	| valeur|	valeur := expression evaluate.	^ valeur negated 	! !!ENegation methodsFor: 'accessing' stamp: 'Barry 3/8/2019 16:26'!expression: anExpression"definition d'un setteur"expression := anExpression! !!ENegation methodsFor: 'arithmetic' stamp: 'Barry 3/8/2019 17:14'!negated^ self class new expression: self! !TestCase subclass: #ENegationTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Expressions'!!ENegationTest methodsFor: 'tests' stamp: 'Barry 3/8/2019 16:25'!testEvaluateself assert: (ENegation new expression: (EConstant new value: 5))evaluate equals: -5! !!ENegationTest methodsFor: 'tests' stamp: 'Barry 3/8/2019 17:11'!testNegationNegatedself assert: (EConstant new value: 6) negated negated evaluateequals: 6! !