TestCase subclass: #EAdditionTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Expressions'!!EAdditionTest methodsFor: 'tests' stamp: 'Barry 3/15/2019 13:58'!testNegated	| ep1 ep2 |	ep1 := EConstant new value: 5.	ep2 := EConstant new value: 3.	self		assert:			((EAddition new				right: ep1;				left: ep2) negated evaluateWith: Dictionary new)		equals: -8! !!EAdditionTest methodsFor: 'tests' stamp: 'Barry 3/15/2019 13:58'!testEvaluateWithNegation	| ep1 ep2 |	ep1 := ENegation new expression: (EConstant new value: 5).	ep2 := EConstant new value: 3.	self		assert:			((EAddition new				right: ep1;				left: ep2) evaluateWith: Dictionary new)		equals: -2! !!EAdditionTest methodsFor: 'tests' stamp: 'Barry 3/15/2019 13:58'!testEvaluate	| ep1 ep2 |	ep1 := EConstant new value: 5.	ep2 := EConstant new value: 3.	self		assert:			((EAddition new				right: ep1;				left: ep2) evaluateWith: Dictionary new)		equals: 8! !!EAdditionTest methodsFor: 'tests' stamp: 'BarryIssagha 3/9/2019 14:21'!testPrintingself assert: (EAddition fivePlusThree) printString equals: '( 5 + 3 )'.self assert: (EAddition fivePlusThree) negated printString equals:'- ( 5 + 3 )'! !!EAdditionTest methodsFor: 'tests' stamp: 'Barry 3/15/2019 13:58'!testEvaluateWithClassCreationMessage	| ep1 ep2 |	ep1 := EConstant value: 5.	ep2 := EConstant value: 3.	self		assert: ((EAddition left: ep1 right: ep2) evaluateWith: Dictionary new)		equals: 8! !TestCase subclass: #EConstantTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Expressions'!!EConstantTest methodsFor: 'tests' stamp: 'Barry 3/15/2019 13:58'!testCreationWithClassCreationMessage	self		assert: ((EConstant value: 5) evaluateWith: Dictionary new)		equals: 5! !!EConstantTest methodsFor: 'tests' stamp: 'Barry 3/15/2019 13:58'!testEvaluate	"test pour evaluer une valeur"	self		assert: ((EConstant new value: 5) evaluateWith: Dictionary new)		equals: 5! !!EConstantTest methodsFor: 'tests' stamp: 'Barry 3/15/2019 13:58'!testNegated	self		assert: ((EConstant new value: 6) negated evaluateWith: Dictionary new)		equals: -6! !!EConstantTest methodsFor: 'tests' stamp: 'BarryIssagha 3/9/2019 14:14'!testPrintingself assert: (EConstant value: 5) printString equals: '5'! !Object subclass: #EExpression	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Expressions'!!EExpression methodsFor: 'visiting' stamp: 'Barry 3/15/2019 14:19'!accept: anVisitor	""	self subclassResponsibility! !!EExpression methodsFor: 'public access' stamp: 'Barry 3/15/2019 13:58'!evaluateWith: anObject	^self subclassResponsibility! !!EExpression methodsFor: 'arithmetic' stamp: 'BarryIssagha 3/9/2019 13:59'!negated^ ENegation new expression: self! !EExpression subclass: #EBinaryExpression	instanceVariableNames: 'left right'	classVariableNames: ''	poolDictionaries: ''	category: 'Expressions'!!EBinaryExpression methodsFor: 'print' stamp: 'BarryIssagha 3/10/2019 01:26'!operatorString	^ self subclassResponsibility! !!EBinaryExpression methodsFor: 'printing' stamp: 'BarryIssagha 3/10/2019 01:02'!printOn: aStream	aStream 	nextPutAll: '( '.	left printOn: aStream.	aStream nextPutAll:  self operatorString.	right printOn: aStream.	aStream nextPutAll: ' )'.! !!EBinaryExpression methodsFor: 'accessing' stamp: 'BarryIssagha 3/10/2019 00:33'!right: anExpressionright := anExpression! !!EBinaryExpression methodsFor: 'accessing' stamp: 'BarryIssagha 3/10/2019 00:33'!left: anExpressionleft := anExpression! !!EBinaryExpression methodsFor: 'accessing' stamp: 'Barry 3/15/2019 16:43'!right	^ right! !!EBinaryExpression methodsFor: 'accessing' stamp: 'Barry 3/15/2019 16:43'!left	^ left! !EBinaryExpression subclass: #EAddition	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Expressions'!!EAddition methodsFor: 'public access' stamp: 'Barry 3/15/2019 14:07'!evaluateWith: anObject	"evaluation pour une addition"^ (right evaluateWith: anObject) + (left evaluateWith: anObject)! !!EAddition methodsFor: 'as yet unclassified' stamp: 'BarryIssagha 3/10/2019 01:01'!operatorString	^ ' + '! !!EAddition methodsFor: 'visiting' stamp: 'Barry 3/15/2019 16:59'!accept: anVisitor		^anVisitor visiteAddition: self! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!EAddition class	instanceVariableNames: ''!!EAddition class methodsFor: 'as yet unclassified' stamp: 'BarryIssagha 3/9/2019 14:11'!fivePlusThree	<sampleInstance>	| ep1 ep2 |ep1 := EConstant new value: 5.ep2 := EConstant new value: 3.^ self new left: ep1 ; right: ep2! !!EAddition class methodsFor: 'initialize-release' stamp: 'BarryIssagha 3/9/2019 14:04'!left: anInteger right: anInteger2^ self new left: anInteger ; right: anInteger2! !EExpression subclass: #EConstant	instanceVariableNames: 'value'	classVariableNames: ''	poolDictionaries: ''	category: 'Expressions'!!EConstant methodsFor: 'accessing' stamp: 'Barry 3/8/2019 16:23'!value: anInteger	"  modife la valeur"	value := anInteger ! !!EConstant methodsFor: 'accessing' stamp: 'Barry 3/15/2019 16:42'!value	^ value! !!EConstant methodsFor: 'public access' stamp: 'Barry 3/15/2019 13:58'!evaluateWith: anObject	"evalue la valeur d'une constance"	^value! !!EConstant methodsFor: 'visiting' stamp: 'Barry 3/15/2019 14:23'!accept: anVisitor	""	^ anVisitor visiteEconstant: self! !!EConstant methodsFor: 'printing' stamp: 'BarryIssagha 3/9/2019 14:15'!printOn: aStreamaStream 	nextPutAll: value printString! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!EConstant class	instanceVariableNames: ''!!EConstant class methodsFor: 'as yet unclassified' stamp: 'BarryIssagha 3/9/2019 14:11'!constant5<sampleInstance>^ self new value: 5! !!EConstant class methodsFor: 'as yet unclassified' stamp: 'BarryIssagha 3/9/2019 14:10'!constant3<sampleInstance>^ self new value: 3! !!EConstant class methodsFor: 'accessing' stamp: 'BarryIssagha 3/9/2019 14:00'!value: anInteger^ self new value: anInteger! !EBinaryExpression subclass: #EMultiplication	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Expressions'!!EMultiplication methodsFor: 'public access' stamp: 'Barry 3/15/2019 13:58'!evaluateWith: anObject	| evalRigth evalLeft |	evalRigth := right evaluateWith: Dictionary new.	evalLeft := left evaluateWith: Dictionary new.	^ evalRigth * evalLeft! !!EMultiplication methodsFor: 'as yet unclassified' stamp: 'BarryIssagha 3/10/2019 01:02'!operatorString	^ ' * '! !!EMultiplication methodsFor: 'visiting' stamp: 'Barry 3/15/2019 14:22'!accept: anVisitor	""	^ anVisitor visiteMultiplication: self! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!EMultiplication class	instanceVariableNames: ''!!EMultiplication class methodsFor: 'as yet unclassified' stamp: 'BarryIssagha 3/9/2019 14:22'!fiveTimesThree<sampleInstance>| ep1 ep2 |ep1 := EConstant constant5.ep2 := EConstant constant3.^ EMultiplication new left: ep1 ; right: ep2! !!EMultiplication class methodsFor: 'initialize-release' stamp: 'BarryIssagha 3/9/2019 14:07'!left: anInteger right: anInteger2^ self new left: anInteger ; right: anInteger2! !TestCase subclass: #EMultiplicationTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Expressions'!!EMultiplicationTest methodsFor: 'tests' stamp: 'Barry 3/15/2019 13:58'!testEvaluateNegated	| ep1 ep2 |	ep1 := EConstant new value: 5.	ep2 := EConstant new value: 3.	self		assert:			((EMultiplication new				right: ep1;				left: ep2) negated evaluateWith: Dictionary new)		equals: -15! !!EMultiplicationTest methodsFor: 'tests' stamp: 'Barry 3/15/2019 13:58'!testEvaluateWithClassCreationMessage	| ep1 ep2 |	ep1 := EConstant new value: 5.	ep2 := EConstant new value: 3.	self		assert:			((EMultiplication new				left: ep1;				right: ep2) evaluateWith: Dictionary new)		equals: 15! !!EMultiplicationTest methodsFor: 'tests' stamp: 'Barry 3/15/2019 13:58'!testEvaluate	| ep1 ep2 |	ep1 := EConstant new value: 5.	ep2 := EConstant new value: 3.	self		assert:			((EMultiplication new				right: ep1;				left: ep2) evaluateWith: Dictionary new)		equals: 15! !!EMultiplicationTest methodsFor: 'tests' stamp: 'BarryIssagha 3/9/2019 14:23'!testPrintingself assert: (EMultiplication fiveTimesThree) negated printString equals: '- ( 5 * 3 )'! !EExpression subclass: #ENegation	instanceVariableNames: 'expression'	classVariableNames: ''	poolDictionaries: ''	category: 'Expressions'!!ENegation methodsFor: 'visiting' stamp: 'Barry 3/15/2019 14:24'!accept: anVisitor	""	^ anVisitor visiteENegation: self! !!ENegation methodsFor: 'arithmetic' stamp: 'Barry 3/15/2019 13:58'!negated	| val |	val := self evaluateWith: Dictionary new.	val < 0		ifTrue: [ ^ expression ]		ifFalse: [ ^ super negated ]! !!ENegation methodsFor: 'accessing' stamp: 'BarryIssagha 3/9/2019 14:17'!printOn: aStreamaStream 	nextPutAll: '- ';	nextPutAll: expression printString! !!ENegation methodsFor: 'accessing' stamp: 'Barry 3/8/2019 16:26'!expression: anExpression"definition d'un setteur"expression := anExpression! !!ENegation methodsFor: 'accessing' stamp: 'Barry 3/15/2019 15:44'!expression	^ expression! !!ENegation methodsFor: 'public access' stamp: 'Barry 3/15/2019 15:46'!evaluateWith: anObject	| valeur |	valeur := expression evaluateWith: anObject .	^ valeur negated	"^ self accept: VisitorEvaluateWith new"! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ENegation class	instanceVariableNames: ''!!ENegation class methodsFor: 'instance creation' stamp: 'BarryIssagha 3/9/2019 14:02'!expression: anExpression^self new expression: anExpression ! !TestCase subclass: #ENegationTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Expressions'!!ENegationTest methodsFor: 'tests' stamp: 'Barry 3/15/2019 13:58'!testNegationNegated	self		assert: ((EConstant new value: 6) negated negated evaluateWith: Dictionary new)		equals: 6! !!ENegationTest methodsFor: 'tests' stamp: 'BarryIssagha 3/10/2019 00:04'!testNegatedStructureIsCorrect	| exp |		exp := EConstant value: 11.		self assert: exp negated class = ENegation.		self assert: exp negated negated equals: exp.! !!ENegationTest methodsFor: 'tests' stamp: 'Barry 3/15/2019 13:58'!testEvaluateWithClassCreationMessage	self		assert:			((ENegation expression: (EConstant value: 5))				evaluateWith: Dictionary new)		equals: -5! !!ENegationTest methodsFor: 'tests' stamp: 'Barry 3/15/2019 13:58'!testEvaluate	self		assert:			((ENegation new expression: (EConstant new value: 5))				evaluateWith: Dictionary new)		equals: -5! !EExpression subclass: #EVariable	instanceVariableNames: 'id'	classVariableNames: ''	poolDictionaries: ''	category: 'Expressions'!!EVariable methodsFor: 'accessing' stamp: 'Barry 3/15/2019 17:25'!id	^ id! !!EVariable methodsFor: 'accessing' stamp: 'BarryIssagha 3/10/2019 01:55'!id: aSymbol	id := aSymbol! !!EVariable methodsFor: 'as yet unclassified' stamp: 'BarryIssagha 3/10/2019 01:59'!evaluateWith: aBindingDictionary	^ aBindingDictionary at: id! !!EVariable methodsFor: 'visiting' stamp: 'Barry 3/15/2019 14:25'!accept: anVisitor	""	^ anVisitor visiteEVariable: self! !!EVariable methodsFor: 'printing' stamp: 'BarryIssagha 3/10/2019 01:56'!printOn: aStream	aStream 		nextPutAll: id asString! !TestCase subclass: #EVariableTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Expressions'!!EVariableTest methodsFor: 'tests' stamp: 'BarryIssagha 3/10/2019 02:08'!testEvaluateXplusY	| ep1 ep2 add |	ep1 := EVariable new id: #x.	ep2 := EVariable new id: #y.	add := EAddition left: ep1 right: ep2.	self assert: (add evaluateWith: { #x -> 10 . #y -> 2 } asDictionary) equals: 12.	self assert: (add evaluateWith: { #x -> 10 . #y -> 12 } asDictionary) equals: 22! !!EVariableTest methodsFor: 'tests' stamp: 'BarryIssagha 3/10/2019 01:54'!testValueOfx	self assert: ((EVariable new id: #x) evaluateWith: {#x -> 10}asDictionary) equals: 10.! !!EVariableTest methodsFor: 'tests' stamp: 'BarryIssagha 3/10/2019 02:03'!testValueOfxInNegation	self assert: ((EVariable new id: #x) negated evaluateWith: {#x -> 10} asDictionary) equals: -10! !TestCase subclass: #VisitorEvaluateWithTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Expressions'!!VisitorEvaluateWithTest methodsFor: 'as yet unclassified' stamp: 'Barry 3/15/2019 17:13'!testvisitorEMultiplication     | left right multiplication mult|   left := EConstant  value: 2.   right := EConstant value: 5.   multiplication := EMultiplication left: left right: right.	mult := multiplication accept: VisitorEvaluateWith new.   self assert: mult  equals:10   ! !!VisitorEvaluateWithTest methodsFor: 'as yet unclassified' stamp: 'Barry 3/15/2019 17:21'!testvisitorENegation      |negated  negation  valeurnegation|     negated := EConstant value: 7.	  negation  := ENegation expression: negated .	valeurnegation := negation accept: VisitorEvaluateWith new.	self assert: valeurnegation  equals:-7! !!VisitorEvaluateWithTest methodsFor: 'as yet unclassified' stamp: 'Barry 3/15/2019 16:37'!testvisitConstant	| constant valeur |	constant := EConstant value: 5.	valeur := constant accept: VisitorEvaluateWith new.	self assert: valeur equals: 5! !!VisitorEvaluateWithTest methodsFor: 'as yet unclassified' stamp: 'Barry 3/15/2019 16:56'!testvisitEAddition	| left right addition valeuraddition |	left := EConstant value: 5.	right := EConstant value: 7.	addition := EAddition left: left right: right.	valeuraddition := addition accept: VisitorEvaluateWith new.	self assert: valeuraddition  equals:12! !Object subclass: #VisitorInterface	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Expressions'!!VisitorInterface methodsFor: 'as yet unclassified' stamp: 'Barry 3/15/2019 14:28'!visiteAddition: anAddition	self subclassResponsibility ! !!VisitorInterface methodsFor: 'as yet unclassified' stamp: 'Barry 3/15/2019 14:30'!visiteENegation: anENegation	self subclassResponsibility ! !!VisitorInterface methodsFor: 'as yet unclassified' stamp: 'Barry 3/15/2019 14:30'!visiteEconstant: anEconstant	self subclassResponsibility ! !!VisitorInterface methodsFor: 'as yet unclassified' stamp: 'Barry 3/15/2019 14:39'!visiteEVariable: anEvariable	self subclassResponsibility ! !!VisitorInterface methodsFor: 'as yet unclassified' stamp: 'Barry 3/15/2019 14:29'!visiteMultiplication: anMultiplication	self subclassResponsibility ! !VisitorInterface subclass: #VisitorEvaluateWith	instanceVariableNames: 'aBindingDictionary'	classVariableNames: ''	poolDictionaries: ''	category: 'Expressions'!!VisitorEvaluateWith methodsFor: 'as yet unclassified' stamp: 'Barry 3/15/2019 14:53'!visiteAddition: anAddition	^  (anAddition left accept: self) + (anAddition right accept: self)! !!VisitorEvaluateWith methodsFor: 'as yet unclassified' stamp: 'Barry 3/15/2019 15:30'!visiteENegation: anENegation		| expressionvalue |	expressionvalue := anENegation expression accept: self.	^ expressionvalue negated ! !!VisitorEvaluateWith methodsFor: 'as yet unclassified' stamp: 'Barry 3/15/2019 15:25'!visiteEconstant: anEconstant	^ anEconstant value! !!VisitorEvaluateWith methodsFor: 'as yet unclassified' stamp: 'Barry 3/15/2019 17:26'!visiteEVariable: anEvariable	  		  ! !!VisitorEvaluateWith methodsFor: 'as yet unclassified' stamp: 'Barry 3/15/2019 17:09'!visiteMultiplication: anMultiplication	^ (anMultiplication left accept: self) * (anMultiplication right accept: self)! !